//
//  TSNRESTObjectMap.m
//  todomvc
//
//  Created by Thomas Sunde Nielsen on 06.12.13.
//  Copyright (c) 2013 Thomas Sunde Nielsen. All rights reserved.
//

#import <objc/runtime.h>
#import "TSNRESTObjectMap.h"
#import "NSString+TSNRESTCasing.h"
#import "NSString+InflectorKit.h"

@implementation TSNRESTObjectMap

+ (TSNRESTObjectMap *)autogeneratedMapForClass:(Class)classToInit {
    TSNRESTObjectMap *map = [[TSNRESTObjectMap alloc] initWithClass:classToInit];
    [map automapAllProperties];
    [map setAutomaticServerPath];
    return map;
}

- (id)initWithClass:(Class)classToInit
{
    self = [self init];
    if(self) {
        self.classToMap = classToInit;
        self.serverPath = [NSStringFromClass(classToInit) lowercaseString];
    }
    return(self);
}

- (id)init
{
    self = [super init];
    if (self)
    {
        self.objectToWeb = [[NSMutableDictionary alloc] init];
    }
    return self;
}

- (void)mapObjectKeys:(NSArray *)objectKeys toWebKeys:(NSArray *)webKeys
{
    for (int i = 0; i < objectKeys.count && i < webKeys.count; i++)
    {
        [self mapObjectKeys:[objectKeys objectAtIndex:i] toWebKeys:[webKeys objectAtIndex:i]];
    }
}

- (void)mapClass:(Class)classToMap toWebKey:(NSString *)webKey
{
    [self.objectToWeb setObject:webKey forKey:[NSStringFromClass(classToMap) decapitalizedString]];
}

- (void)mapObjectKey:(NSString *)objectKey toWebKey:(NSString *)webKey
{
    [self.objectToWeb setObject:webKey forKey:objectKey];
}

- (void)mapObjectKey:(NSString *)objectKey toWebKeys:(NSArray *)webKey
{
    [self.objectToWeb setObject:webKey forKey:objectKey];
}

- (void)mapIdenticalKey:(NSString *)key
{
    [self mapObjectKey:key toWebKey:key];
}

- (void)mapIdenticalKeys:(NSArray *)keys
{
    for (NSString *key in keys)
        [self mapIdenticalKey:key];
}

- (void)mapCamelCasedObjectKeyToUnderscoreWebKey:(NSString *)key
{
    [self mapObjectKey:key toWebKey:[key stringByConvertingCamelCaseToUnderscore]];
}

- (void)mapCamelCasedObjectKeysToUnderscoreWebKeys:(NSArray *)keys
{
    for (NSString *key in keys)
        [self mapCamelCasedObjectKeyToUnderscoreWebKey:key];
}

-(void)addBoolean:(NSString *)boolean
{
    if (!self.booleans)
        self.booleans = [[NSMutableDictionary alloc] init];
    [self.booleans setObject:@YES forKey:boolean];
}

-(void)addEnumMap:(NSDictionary *)enumMap forKey:(NSString *)key
{
    if (!self.enumMaps)
        self.enumMaps = [[NSMutableDictionary alloc] init];
    [self.enumMaps setObject:enumMap forKey:key];
}

- (void)addClass:(Class)classType forKey:(NSString *)key {
    if (!self.keyClasses)
        self.keyClasses = [[NSMutableDictionary alloc] init];
    [self.keyClasses setObject:classType forKey:key];
}

static const char *getPropertyType(objc_property_t property) {
    const char *attributes = property_getAttributes(property);
    char buffer[1 + strlen(attributes)];
    strcpy(buffer, attributes);
    char *state = buffer, *attribute;
    while ((attribute = strsep(&state, ",")) != NULL) {
        if (attribute[0] == 'T') {
            return (const char *)[[NSData dataWithBytes:(attribute + 3) length:strlen(attribute) - 4] bytes];
        }
    }
    return "@";
}

- (void)setAutomaticServerPath {
    self.serverPath = [[NSStringFromClass(self.classToMap) pluralizedString] lowercaseString];
}

- (void)automapAllProperties {
#if DEBUG
    NSLog(@"Mapping properties of %@:", NSStringFromClass(self.classToMap));
#endif
    unsigned int outCount, i;
    objc_property_t *properties = class_copyPropertyList(self.classToMap, &outCount);
    for (i = 0; i < outCount; i++) {
        objc_property_t property = properties[i];
        const char *propName = property_getName(property);
        if(propName) {
            const char *propType = getPropertyType(property);
            NSString *propertyName = [NSString stringWithCString:propName
                                                        encoding:[NSString defaultCStringEncoding]];
            NSString *propertyType = [NSString stringWithCString:propType
                                                        encoding:[NSString defaultCStringEncoding]];
            if ([propertyName isEqualToString:@"systemId"] || [propertyName isEqualToString:@"dirty"]) {
                continue;
            }
            else if ([propertyType isEqualToString:@"NSString"] ||
                [propertyType isEqualToString:@"NSNumber"] ||
                [propertyType isEqualToString:@"NSDate"]) {
#if DEBUG
                NSLog(@"Found and mapped property %@ of type %@", propertyName, propertyType);
#endif
                [self mapCamelCasedObjectKeyToUnderscoreWebKey:propertyName];
            } else if ([NSClassFromString(propertyType) isSubclassOfClass:[NSManagedObject class]]) {
                Class class = NSClassFromString(propertyType);
                NSString *webKey = [[NSString stringWithFormat:@"%@_id", propertyType] decapitalizedString];
                [self mapClass:class toWebKey:webKey];
            }
        }
    }
}

/*
 Quickmap
 Check if class
 if(class_isMetaClass(object_getClass(obj)))
 */

- (void)logObjectMappings
{
    for (NSString *key in self.objectToWeb)
    {
        NSMutableString *logString = [NSMutableString stringWithFormat:@"Object: %@", key];
        for (long i = 15-key.length; i > 0; i--)
            [logString appendString:@" "];
        NSString *value = [self.objectToWeb objectForKey:key];
        [logString appendFormat:@"Web: %@", value];
        NSLog(@"%@", logString);
    }
}

@end
