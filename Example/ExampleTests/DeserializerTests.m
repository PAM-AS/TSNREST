//
//  DeserializerTests.m
//  Example
//
//  Created by Thomas Sunde Nielsen on 23.12.14.
//  Copyright (c) 2014 PAM. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "NSArray+TSNRESTDeserializer.h"
#import "Brand.h"
#import "Product.h"
#import "NSURLSessionDataTask+TSNRESTDataTask.h"
#import "TSNRESTParser.h"

@interface DeserializerTests : XCTestCase

@end

@implementation DeserializerTests

- (void)setUp {
    [super setUp];
    [[TSNRESTManager sharedManager] addObjectMap:[TSNRESTObjectMap autogeneratedMapForClass:[Brand class]]];
    [[TSNRESTManager sharedManager] addObjectMap:[TSNRESTObjectMap autogeneratedMapForClass:[Product class]]];
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testThatDeserializerCanDeserializeJSON {
    NSURL *url = [[NSURL alloc] initFileURLWithPath:[[NSBundle mainBundle] pathForResource:@"Fixtures/JSON/brands" ofType:@"json"]];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    
    XCTestExpectation *datataskExpectation = [self expectationWithDescription:@"Datatask complete"];
    
    NSURLSessionDataTask *task = [NSURLSessionDataTask dataTaskWithRequest:request success:^(NSData *data, NSURLResponse *response, NSError *error) {
        XCTAssert(data.length > 0, @"No valid data was provided from the fixtures.");
    } failure:^(NSData *data, NSURLResponse *response, NSError *error, NSInteger statusCode) {
        XCTFail(@"Data task failed.");
    } finally:^(NSData *data, NSURLResponse *response, NSError *error) {
        [datataskExpectation fulfill];
    } parseResult:YES];
    [task resume];
    
    
    [self waitForExpectationsWithTimeout:1 handler:^(NSError *error) {
        NSUInteger expectedCount = 8;
        XCTAssert([Brand MR_countOfEntities] == expectedCount, @"Got wrong amount of brands (%li) in our db, expected %li, parsing failed.", [Brand MR_countOfEntities], expectedCount);
    }];
}

- (void)testThatDeserializingMultipleSimultaniouslyWorks {
    NSURL *brandUrl = [[NSURL alloc] initFileURLWithPath:[[NSBundle mainBundle] pathForResource:@"Fixtures/JSON/brands" ofType:@"json"]];
    NSURLRequest *brandRequest = [NSURLRequest requestWithURL:brandUrl];
    
    XCTestExpectation *brandDatataskExpectation = [self expectationWithDescription:@"Brand datatask complete"];
    
    NSURLSessionDataTask *brandTask = [NSURLSessionDataTask dataTaskWithRequest:brandRequest success:^(NSData *data, NSURLResponse *response, NSError *error) {
        XCTAssert(data.length > 0, @"No valid data was provided from the fixtures.");
    } failure:^(NSData *data, NSURLResponse *response, NSError *error, NSInteger statusCode) {
        XCTFail(@"Data task failed.");
    } finally:^(NSData *data, NSURLResponse *response, NSError *error) {
        [brandDatataskExpectation fulfill];
    } parseResult:YES];
    [brandTask resume];
    
    NSURL *productUrl = [[NSURL alloc] initFileURLWithPath:[[NSBundle mainBundle] pathForResource:@"Fixtures/JSON/products" ofType:@"json"]];
    NSURLRequest *productRequest = [NSURLRequest requestWithURL:productUrl];
    
    XCTestExpectation *productDatataskExpectation = [self expectationWithDescription:@"Product datatask complete"];
    
    NSURLSessionDataTask *productTask = [NSURLSessionDataTask dataTaskWithRequest:productRequest success:^(NSData *data, NSURLResponse *response, NSError *error) {
        XCTAssert(data.length > 0, @"No valid data was provided from the fixtures.");
    } failure:^(NSData *data, NSURLResponse *response, NSError *error, NSInteger statusCode) {
        XCTFail(@"Data task failed.");
    } finally:^(NSData *data, NSURLResponse *response, NSError *error) {
        [productDatataskExpectation fulfill];
    } parseResult:YES];
    [productTask resume];
    
    
    [self waitForExpectationsWithTimeout:1 handler:^(NSError *error) {
        NSUInteger expectedBrandCount = 8;
        XCTAssert([Brand MR_countOfEntities] == expectedBrandCount, @"Got wrong amount of brands (%li) in our db, expected %li, parsing failed.", [Brand MR_countOfEntities], expectedBrandCount);
        [Brand MR_truncateAll];
        
        NSUInteger expectedProductCount = 10;
        XCTAssert([Product MR_countOfEntities] == expectedProductCount, @"Got wrong amount of products (%li) in our db, expected %li, parsing failed.", [Product MR_countOfEntities], expectedProductCount);
        [Product MR_truncateAll];
    }];
}

- (void)testThatParsingNilDictDoesntAddToStore {
    NSUInteger productCount = [Product MR_countOfEntities];
    [TSNRESTParser parseAndPersistDictionary:nil];
    XCTAssertEqual(productCount, [Product MR_countOfEntities], @"Parsing empty dict added products.");
}

//- (void)testPerformanceExample {
//    // This is an example of a performance test case.
//    [self measureBlock:^{
//        // Put the code you want to measure the time of here.
//    }];
//}

@end
